Consumer group rebalancing is triggered when partitions need to be reassigned among consumers in the consumer group: A new consumer joins the group; an existing consumer leaves the group; an existing consumer changes subscription; or partitions are added to one of the subscribed topics.

Rebalancing is orchestrated by the group coordinator and it involves communication with all consumers in the group. 


Consumer get batch of records from Kafka.
Case: auto commit
	once all the records has processed and consumer send request to poll again, then only offset is commited.
	
	
The maximum delay allowed between poll method calls is defined by the max.poll.interval.ms config, which is five minutes by default. If a consumer fails to call the poll method within that interval, it is considered dead, and group rebalancing is triggered. 

spring.cloud.stream.bindings.<channel-name>.consumer.concurrency = 3

If at kafka, there are 3 partions of a topic
And in my service, i set concurrency = 3 and partion-count as 6
Then in that case 3 threads will get 2 partions each, but as in actual there are only 3 partitions so it might happen that out 2 out 3 partitions assigned to single thread.

Flow without any config for error or retry:
1. poll() method called and it fetched 3 events 
2. encounter error in 2nd event
3. service retried error event 3 times, after that thrown an exception and commit the offset upto 1 successful event.
4. read again remaining 2 events.
5. this process goes in loop

For handling any errors while processing we can use:
	auto-commit-on-error = true -> this will commit the offset if any error occur during processing
	@Retryable -> this can be used for retry mechanism when any error comes.
	

starting with version 2.3 autoCommit options are replaced by ack-mode

default ack-mode: BATCH
